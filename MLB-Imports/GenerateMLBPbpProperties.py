import ProUtils
proplist = [{'key': 'ballEndSpeed', 'type': 'int'}, {'key': 'ballStartSpeed', 'type': 'int'}, {'key': 'base', 'type': 'int'}, {'key': 'battingPlayer', 'type': 'PlayerId'}, {'key': 'catchingPlayer', 'type': 'PlayerId'}, {'key': 'fromBase', 'type': 'int'}, {'key': 'fromPlayer', 'type': 'PlayerId'}, {'key': 'hitType', 'type': 'str'}, {'key': 'incomingPlayer', 'type': 'PlayerId'}, {'key': 'isCatchingError', 'type': 'bool'}, {'key': 'isCaught', 'type': 'bool'}, {'key': 'isCaughtOut', 'type': 'bool'}, {'key': 'isEarnedRun', 'type': 'bool'}, {'key': 'isError', 'type': 'bool'}, {'key': 'isForceOut', 'type': 'bool'}, {'key': 'isForcedOut', 'type': 'bool'}, {'key': 'isOut', 'type': 'bool'}, {'key': 'isPassedBall', 'type': 'bool'}, {'key': 'isRunScored', 'type': 'bool'}, {'key': 'isRunningPlayerOut', 'type': 'bool'}, {'key': 'isSafe', 'type': 'bool'}, {'key': 'isSuccessful', 'type': 'bool'}, {'key': 'isTagOut', 'type': 'bool'}, {'key': 'isThrowingError', 'type': 'bool'}, {'key': 'isWalk', 'type': 'bool'}, {'key': 'isWalkIntentional', 'type': 'bool'}, {'key': 'isWildPitch', 'type': 'bool'}, {'key': 'outgoingPlayer', 'type': 'PlayerId'}, {'key': 'pitchedLocation-x', 'type': 'INTEGER'}, {'key': 'pitchedLocation-y', 'type': 'INTEGER'}, {'key': 'pitchingPlayer', 'type': 'PlayerId'}, {'key': 'position', 'type': 'str'}, {'key': 'result', 'type': 'str'}, {'key': 'retrievedAtLocation-x', 'type': 'INTEGER'}, {'key': 'retrievedAtLocation-y', 'type': 'INTEGER'}, {'key': 'retrievedByPlayer', 'type': 'PlayerId'}, {'key': 'runningPlayer', 'type': 'PlayerId'}, {'key': 'standingLeftOrRight', 'type': 'str'}, {'key': 'stealingPlayer', 'type': 'PlayerId'}, {'key': 'team', 'type': 'PlayerId'}, {'key': 'throwType', 'type': 'str'}, {'key': 'throwingLeftOrRight', 'type': 'str'}, {'key': 'toBase', 'type': 'int'}, {'key': 'toPlayer', 'type': 'PlayerId'}]
castList = [{'type': 'INTEGER', 'castTo': 'FLOAT'}, {'type': 'PlayerId', 'castTo': 'INT64'}, {'type': 'bool', 'castTo': 'bool'}, {'type': 'int', 'castTo': 'INT64'}, {'type': 'str', 'castTo': 'STRING'}]
propTemplate = "cast ((SELECT value from unnest (atBatSubPlay.properties) where key='{}') as {}) as {},"
castDict = {}
for cast in castList:
    castDict[cast['type']] = cast['castTo']

for propdef in proplist:
    print(propTemplate.format(propdef['key'], castDict[propdef['type']], propdef['key'].replace('-x', 'X').replace('-y', 'Y')))

